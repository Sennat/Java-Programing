To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.To get a response from the server, the client creates a "receive" packet and uses the DatagramSocket 
receive method to receive the reply from the server. The receive method waits until a datagram packet 
destined for the client comes through the socket. Note that if the server's reply is somehow lost, the 
client will wait forever because of the no-guarantee policy of the datagram model. Normally, a client 
sets a timer so that it doesn't wait forever for a reply; if no reply arrives, the timer goes off and 
the client retransmits. When the client receives a reply from the server, the client uses the getData 
method to retrieve that data from the packet. The client then converts the data to a string and displays 
it.